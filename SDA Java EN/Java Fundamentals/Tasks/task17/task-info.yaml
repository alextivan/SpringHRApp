type: edu
files:
- name: src/Task.java
  visible: true
  placeholders:
  - offset: 151
    length: 31
    placeholder_text: // Implement your solution here
    initial_state:
      length: 31
      offset: 151
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      char[] text = scanner.nextLine().toCharArray();
              // If the bracket is opened, increase by one, if closed, decrease by one.
              // For ideal balancing of parentheses, the variable should be 0 at the end of the iteration of the text.
              int parenthesesOpen = 0;

              for (char c : text) {
                  switch (c) {
                      case '(':
                          parenthesesOpen++;
                          break;
                      case ')':
                          parenthesesOpen--;
                          break;
                  }

                  // Check every sign to see if the parenthesis has been closed without being previously opened.
                  if (parenthesesOpen < 0) {
                      break;
                  }
              }

              if (parenthesesOpen != 0) {
                  System.out.println("Incorrect pairing of brackets");
              } else {
                  System.out.println("OK");
              }
  text: |-
    import java.util.Scanner;

    public class Task {
        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);

            // Implement your solution here

        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.junit.After;
    import org.junit.Before;
    import org.junit.Test;

    import java.io.ByteArrayInputStream;
    import java.io.ByteArrayOutputStream;
    import java.io.InputStream;
    import java.io.PrintStream;

    import static org.junit.Assert.assertEquals;

    public class Tests {

        private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
        private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();
        private final PrintStream originalOut = System.out;
        private final PrintStream originalErr = System.err;
        private final InputStream originalIn = System.in;

        @Before
        public void setUpStreams() {
            System.setOut(new PrintStream(outContent));
            System.setErr(new PrintStream(errContent));
        }

        @After
        public void restoreStreams() {
            System.setOut(originalOut);
            System.setErr(originalErr);
            System.setIn(originalIn);
        }

        @Test
        public void testSolution() {
            String inputText = "2 * (3.4 - (-7)/2)*(a-2)/(b-1)))";
            System.setIn(new ByteArrayInputStream(inputText.getBytes()));

            Task.main(new String[]{});

            String expected = "Incorrect pairing of brackets";

            assertEquals(String.format("For the text %s, the program should write to the console: %s.", inputText, expected), expected, outContent.toString().trim());
        }

        @Test
        public void testSolution2() {
            String inputText = "(2 * (3.4 - (-7)/2)*(a-2)/(b-1))";
            System.setIn(new ByteArrayInputStream(inputText.getBytes()));

            Task.main(new String[]{});

            String expected = "OK";

            assertEquals(String.format("For the text %s, the program should write to the console: %s.", inputText, expected), expected, outContent.toString().trim());
        }

        @Test
        public void testSolution3() {
            String inputText = ") 2 * 4 (";
            System.setIn(new ByteArrayInputStream(inputText.getBytes()));

            Task.main(new String[]{});

            String expected = "Incorrect pairing of brackets";

            assertEquals(String.format("For the text %s, the program should write to the console: %s.", inputText, expected), expected, outContent.toString().trim());
        }

        @Test
        public void testSolution4() {
            String inputText = "((2 * 4)";
            System.setIn(new ByteArrayInputStream(inputText.getBytes()));

            Task.main(new String[]{});

            String expected = "Incorrect pairing of brackets";

            assertEquals(String.format("For the text %s, the program should write to the console: %s.", inputText, expected), expected, outContent.toString().trim());
        }

    }
  learner_created: false
status: Unchecked
record: -1
