type: edu
files:
- name: src/Task.java
  visible: true
  text: |-
    public class Task {
        public static void main(String[] args) {
            Dog fido = new Dog();
            fido.setName("Fido");
            fido.wagTail();

            Dog sparky = new Dog("Sparky");
            sparky.wagTail();
        }
    }
  learner_created: false
- name: src/Dog.java
  visible: true
  placeholders:
  - offset: 23
    length: 12
    placeholder_text: // type here
    initial_state:
      length: 12
      offset: 23
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      private String name;

          public Dog() {
          }

          public Dog(String name) {
              this.name = name;
          }

          public void wagTail() {
              System.out.println(name + " wags tail.");
          }

          public void setName(String name) {
              this.name = name;
          }
  text: |
    public class Dog {
        // type here
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.junit.Test;

    public class Tests extends BaseTest {

        @Test
        public void testSolution() {
            runTest("", "Fido wags tail.\nSparky wags tail.");
        }

    }
  learner_created: false
- name: test/BaseTest.java
  visible: false
  text: |
    import org.junit.After;

    import java.io.ByteArrayInputStream;
    import java.io.ByteArrayOutputStream;
    import java.io.PrintStream;
    import java.util.function.Consumer;

    import static org.junit.Assert.assertEquals;

    public class BaseTest {

        @After
        public void restoreStreams() {
            System.setOut(System.out);
            System.setIn(System.in);
        }

        protected void runTest(String input, String expected) {
            String actual = run(Task::main, input);

            assertEquals("Wrong answer for following input: \n" + input + "\n", expected, actual);
        }

        private String run(Consumer<String[]> method, String input) {
            System.setIn(new ByteArrayInputStream(input.getBytes()));

            ByteArrayOutputStream outContent = new ByteArrayOutputStream();
            System.setOut(new PrintStream(outContent));

            method.accept(new String[]{});
            return outContent.toString().trim().replaceAll("\r\n", "\n");
        }
    }
  learner_created: false
status: Unchecked
record: -1
