type: edu
files:
- name: src/Task.java
  visible: true
  placeholders:
  - offset: 143
    length: 12
    placeholder_text: // type here
    initial_state:
      length: 12
      offset: 143
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |2-
              int a = scanner.nextInt();
              int b = scanner.nextInt();

              // Working, yet not sophisticated solution is to use conditional expression
              if ((a > 0 && b < 0) || (a < 0 && b > 0)) {
                  System.out.println(true);
              } else {
                  System.out.println(false);
              }

              // Equivalent code may also be written in following way:
              boolean result = (a > 0 && b < 0) || (a < 0 && b > 0);
              //System.out.println(result);
              // expression placed inside 'if' statement
              // is calculated as 'boolean' value,
              // which - in this case - we may simply print.

              // Alternatively, we can make use of maths:
              // If numbers should have different signs, then one of them should be positive, the other - negative.
              // Result of multiplication of positive and negative numbers is always negative. If the result
              // is positive, that means that either both numbers are positive, or both are negative.
              // If the result equals 0, it means that at least one number equals 0.
              //System.out.println((long)a * b < 0);

              // Please keep in mind that any of number must be cast to 'long' first - multiplication of very big int values
              // may overflow the maximum range of int and return wrong results.
  text: |
    import java.util.Scanner;

    public class Task {
        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);

    // type here
        }
    }
  learner_created: false
- name: test/BaseTest.java
  visible: false
  text: |
    import org.junit.After;

    import java.io.ByteArrayInputStream;
    import java.io.ByteArrayOutputStream;
    import java.io.PrintStream;
    import java.util.function.Consumer;

    import static org.junit.Assert.assertEquals;

    public class BaseTest {

        @After
        public void restoreStreams() {
            System.setOut(System.out);
            System.setIn(System.in);
        }

        protected void runTest(String input, String expected) {
            String actual = run(Task::main, input);

            assertEquals("Wrong answer for following input: \n" + input + "\n", expected, actual);
        }

        private String run(Consumer<String[]> method, String input) {
            System.setIn(new ByteArrayInputStream(input.getBytes()));

            ByteArrayOutputStream outContent = new ByteArrayOutputStream();
            System.setOut(new PrintStream(outContent));

            method.accept(new String[]{});
            return outContent.toString().trim();
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.junit.Test;

    public class Tests extends BaseTest {

        @Test
        public void testSolution() {
            runTest("-1\n1", "false");
        }

        @Test
        public void testSolution2() {
            runTest("0\n1", "false");
        }

        @Test
        public void testSolution3() {
            runTest("1\n0", "false");
        }

        @Test
        public void testSolution4() {
            runTest("1\n1", "true");
        }

        @Test
        public void testSolution5() {
            runTest("-1\n-1", "true");
        }
    }
  learner_created: false
status: Unchecked
record: -1
